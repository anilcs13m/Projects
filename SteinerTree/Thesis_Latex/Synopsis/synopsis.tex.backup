\documentclass[MS,synopsis]{iitmdiss}

\usepackage{etex}
%\usepackage[utf8]{inputenc}
\usepackage[dvips]{graphicx}
\usepackage{amsmath,amssymb} % easier math formulae, align, subequation
\usepackage{fullpage}
\usepackage{graphicx}
\usepackage{amsmath,amssymb}
\usepackage{times,algorithmic,algorithm}
\usepackage{t1enc}
\usepackage{epstopdf}
\usepackage{hyperref}
\usepackage{pstricks,pst-node,pst-tree,pstricks-add}
\usepackage{tikz}
\usepackage{color}
\usepackage{setspace}
\usepackage{bold-extra}
\usepackage{multicol}
\usepackage{caption}
\usepackage{subcaption}
\usepackage{listings}
\usepackage{clrscode3e}
\usetikzlibrary{intersections,decorations, positioning,
arrows,backgrounds,patterns,matrix,shapes,fit,calc,shadows,plotmarks}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newtheorem{theorem}{Theorem}
\newtheorem{corollary}[theorem]{Corollary}
\newtheorem{lemma}[theorem]{Lemma}
\newtheorem{observation}[theorem]{Observation}
\newtheorem{proposition}[theorem]{Proposition}
\newtheorem{definition}[theorem]{Definition}
\newtheorem{claim}[theorem]{Claim}
\newtheorem{fact}[theorem]{Fact}
\newtheorem{assumption}[theorem]{Assumption}
                   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand{\qed}{\rule{7pt}{7pt}}
\newenvironment{proof}{\noindent{\bf Proof}\hspace*{1em}}{\hfill\qed\bigskip}

\captionsetup{labelfont=bf}

\lstset{
  %backgroundcolor = \color{lightgray},
  frame=single,
  numbers=left,
  numbersep=5pt,
  xleftmargin=2em,
  framexleftmargin=1.5em,
  stepnumber=1,
  firstnumber=1,
  numberfirstline=true,
  basicstyle=\fontsize{10.2pt}{12pt}\ttfamily
}

\hypersetup{
    colorlinks=true, %set true if you want colored links
    linktoc=all,     %set to all if you want both sections and subsections linked
    linkcolor=black,  %choose some color if you want links to stand out
    citecolor=black,
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%			AUTHOR DEFINED COMMANDS AND MACROS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newlength{\LPlhbox}
\newcommand\problemfont[1]{{\scshape #1}}
\newcommand\problemfontbold[1]{\large {\textbf{\textsc{#1}}}}
\renewcommand*\lstlistingname{Algorithm}


\newcommand\segment[4]{
\coordinate (#3) at (#1);
\coordinate (#4) at (#2);
\path (#3) edge[|-|] (#4);
}

\newcommand\lblsegment[5]{
\coordinate (#3) at (#1);
\coordinate (#4) at (#2);
\path (#3) edge[|-|] node[above] {#5} (#4) ;
}

\newcommand\lblsegmenttwo[5]{
\coordinate (#3) at (#1);
\coordinate (#4) at (#2);
\path (#3) edge[|-|] node[at start, above] {#5} (#4) ;
}

\newcommand\lblsegmentthree[5]{
\coordinate (#3) at (#1);
\coordinate (#4) at (#2);
\path (#3) edge[|-|] node[left] {#5} (#4) ;
}

\newcommand\lblsegmentfour[5]{
\coordinate (#3) at (#1);
\coordinate (#4) at (#2);
\path (#3) edge[|-|] node[right] {#5} (#4) ;
}

\newcommand\dashsegment[4]{
\coordinate (#3) at (#1);
\coordinate (#4) at (#2);
\path (#3) edge[|-|,dashed] (#4);
}

\newcommand\lblsegmentdir[6]{
\coordinate (#3) at (#1);
\coordinate (#4) at (#2);
\path (#3) edge[|-|] node[#6] {#5} (#4) ;
}

\newcommand\segmenttwo[4]{
\coordinate (#3) at (#1);
\coordinate (#4) at (#2);
\path (#3) edge[-] (#4);
}

\newcommand\invsegment[4]{
\coordinate (#3) at (#1);
\coordinate (#4) at (#2);
\path [opacity = 0] (#3) edge (#4);
}

\newsavebox{\tempbox}
\newcommand{\cbox}[2]{%
  \fcolorbox{black}{#1}{\texttt{#2\strut}}\kern-\fboxrule}% Coloured box

\begin{document}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\title{\MakeUppercase{A Linear Size Approximate Distance Oracle for Chordal Graphs}}
\author{Gaurav Singh}
\date{July 2014}
\department{COMPUTER SCIENCE AND ENGINEERING}

\maketitle
\pagenumbering{arabic}
\setcounter{page}{0}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 \section{INTRODUCTION}
 The All Pairs Shortest Path (APSP) problem is one of the most fundamental problems in graph theory.
 For a given graph $G = (V,E)$, where $V$ is the set of vertices and $E$ is the
 set of edges with $|V| = n$ and $|E| = m$, the $\emph{all pairs shortest path}$
 problem on $G$ is to compute shortest path between all pairs of vertices of $G$.  
 A {\em distance oracle} is a data structure that stores the APSP information and can respond to queries efficiently.   
 The time to set up the oracle, the amount of space it uses, the query response time,
 and update times are among the most well-studied problems in the area of data structures.   
 Many questions still remain open and such data structures are also of immense practical relevance.
 
\begin{tabular}{ll} 
 \multicolumn{ 2}{l}{\problemfontbold{Distance Oracles}} \\
 \textbf{Input} & \begin{minipage}[t]{0.8\columnwidth}
 A graph $G = (V,E)$, where $V$ is the vertex set of graphs and $E$ is set of edges of graph.
 \end{minipage} \\
 \textbf{Output} & \begin{minipage}[t]{0.8\columnwidth}
 A set $\mathcal{D}$ of data structures that can efficiently answer queries of the distance between any pair of vertices of the graph.
 \end{minipage}
 \\
 \end{tabular}
 
 In most of the real world applications we are not interested in queries for all the
 distances, but we query for distance between some pairs of nodes more frequently than others. 
 For example, in a big city like Chennai, distance between many pairs of
 addresses are of no interest to most of the people, we want to access distances between some pairs of nodes 
 quickly. Distance oracle of small size suits best for these kind of applications. 
 
 In this thesis, we restrict our attention on $\emph{chordal graphs}$ with an intent to explore
 how the underlying graph structure can play an important role in setting up efficient distance oracles.
 We exploit the structural properties of clique tree representation of chordal graph to build our distance oracle. 
 We essentially prove the following theorem.
 \pagebreak
 
 \begin{theorem}\label{maintheorem}
 Given a chordal graph $G$, it can be preprocessed in $O(n^2)$ time and $O(n^2)$ space to build a data structure of size $O(n)$
 such that for any query pair $u_i,u_j \in V(G)$, a distance response upper bounded by $2d_G(u_i,u_j)+8$ can be given in constant time.
 \end{theorem}
 

 \section{MOTIVATION}
%  Consider a network of $n$ nodes and $m$ connections. Usually $m \ll n^2$. We need to extract the distance information of the network such that
%  subsequent distance queries can be answered quickly by using this distance information. This problem can be addressed by solving $\textsc{APSP}$
%  for the network and storing $\textsc{APSP}$ matrix. The size of $\textsc{APSP}$ matrix is $n^2$ which is too large to be stored 
%  efficiently. Also, for networks having $m \ll n^2$, the size of matrix is even larger than the network itself. For these kind of applications 
%  we require a distance oracle of small size that can quickly answer distance queries.
%  
%  $\textsc{APSP}$ is one of the oldest problem of graph theory. But despite this fact, there does not exist any algorithm that
%  can solve $\textsc{APSP}$ in truly sub cubic time, i.e., $O(n^{3-\epsilon})$ time for some $\epsilon > 0$.
%  This has motivated researchers to design sub cubic time algorithms that can approximately answer distances between every pairs of vertices.
%  
%  %%%%%%%%%%%%%%%%%%%%%%%
 Consider a network of $n$ nodes and $m$ connections. Usually $m \ll n^2$. We need to extract the distance information of the network such that
 subsequent distance queries can be answered quickly by using this distance information. This problem can be addressed by solving $\textsc{APSP}$
 for the network and storing $\textsc{APSP}$ matrix. The size of $\textsc{APSP}$ matrix is $n^2$ which is too large to be stored 
 efficiently. Also, for networks having $m \ll n^2$, the size of matrix is even larger than the network itself. 
 Furthermore, despite being one of the oldest problems of graph theory, there does not exist any algorithm that
 can solve $\textsc{APSP}$ in truly sub cubic time, i.e., $O(n^{3-\epsilon})$ time for some $\epsilon > 0$.
 
 These issues have motivated researchers to design sub cubic time algorithms using distance oracles of small size that can 
 approximately answer distances between every pairs of vertices efficiently.
 
 %%%%%%%%%%%%%%%%%%%%%%%%
 
 
 Thorup et al.~\cite{thorup} have proved that any distance oracle for general graphs, which gives distances with stretch factor strictly less then $2k+1$,
 requires $\Omega(n^{1+1/k})$ space. In particular, if the stretch is strictly less than 3, then size of the oracle must be $\Omega(n^2)$. However, for  chordal graphs with
 diameter at least ten, our stretch is strictly less than 3 and the size of data structure is $O(n)$.
 Secondly, algorithms designed by both Seidel~\cite{seidel} and Han et al.~\cite{han} compute the square of the input graph $G$ as a subroutine. Given a graph
 $G = (V,E)$, the square of the graph is defined as $G^2 = (V,E')$ where $(u,v) \in E'$ if and only if \mbox{$1 \leq d_G(x,y) \leq 2$}. Methods known for computing
 $G^2$ for a general graph or a chordal graph are as hard as matrix multiplication, hence have time complexity of $O(n^{2.376})$. Therefore, computation of 
 $G^2$ acts as a bottleneck for solving $\textsc{APSP}$ on chordal and general graphs. Han et al.\cite{han} also proved that computing $G^2$ for split graphs,
 which is a subclass of chordal graphs, is as hard as the problem for general graphs. In this thesis we exploit structural properties of chordal graphs
 to bypass matrix multiplication and achieve an $O(n^2)$ running time. 
 
%  
%  Thorup et al.~\cite{thorup} proved that, for any integer $k>0$ a general unweighted graph can be preprocessed in $O(kmn^{1/k})$ time to 
%  build a distance oracle of $O(kn^{1+1/k})$ size. Subsequent distance queries can be answered in $O(k)$ time with a stretch factor of
%  $2k-1$.
 

 \section{CONTRIBUTION OF THE THESIS}
 \subsection{Preliminaries}
 A $\emph{chord}$ of a cycle is an edge between two non adjacent vertices of the cycle.  
 A graph \mbox{$G = (V,E)$} is $\emph{chordal}$ if every cycle of length greater than three has a chord.    
 Let  $K_G$ be the set of maximal cliques of a chordal graph $G$.
 It is well known that there exists a tree $T$, called the clique tree of $G$, 
 whose vertices correspond bijectively to the elements of $K_G$ and for each $v \in V(G)$. 
 We can construct a clique tree $T$ of $G$ in linear time~\cite{cliquetree}. 
 For a set of cliques in $G$, the hitting set of the cliques is a subset of $V(G)$ that has a non-empty intersection with each clique in the given set.
 
 \noindent
{\bf Least Common Ancestors.} Let $T'$ be a rooted tree on $n$ vertices.
Harel et al.~\cite{lcabytarjan}, Scheiber et al.~\cite{lcabyvishkin} and Powell~\cite{lcabypowell} have given
 three different algorithms to preprocess $T'$ in $O(n)$ time to build a data structure $D$ of $O(n)$ size. Subsequent queries of the least common ancestor
 of two vertices an be answered in constant time. We will use the algorithm presented in~\cite{lcabyvishkin} as a subroutine in our algorithm.
 
 Throughout this document, we assume that $G = (V,E)$ is a connected, unweighted chordal graph with $|V| = n$ and $|E| = m$ and $T$ is a 
 clique tree of $G$. Further, when we refer to a clique of a clique tree $T$, we actually mean the clique in $G$ that a node in $T$ corresponds to. 
 For a $u \in V(G)$, we use $T_u$ to refer to the set of cliques in $T$ that contain $u$.  In other words, $T_u$ is the subtree of $T$ whose nodes correspond to $K_G(u)$.
 Finally, when we refer to a vertex $u_i \in V(G)$, we mean that the subscript $i$ satisfies $1 \leq i \leq n$.  
 
 \subsection{Distance information from clique trees}\label{pathinfo}
 We first show the connection between the distance in the graph between $u$ and $v$ and
 the hitting set of the cliques on the path connecting $T_u$ and $T_v$ in $T$.
 
 \begin{lemma} \label{hitsel}
 Let $u,v \in V$ such that $d_G(u,v) > 1$, and let $S \subseteq V$ be a minimum
 set of  vertices that hits  all the cliques in the path in $T$ joining $T_u$ and $T_v$.
 Then $|S| \leq d_G(u,v)-1$, i.e., $|S|$ is upper bounded by the number of internal vertices
 in any shortest path joining $u$ and $v$ in $G$. 
\end{lemma}

 \begin{corollary} \label{hitselany}
 Let $u$ and $v$ be non-adjacent vertices in $G$, and $C_u$ and $C_v$ be two maximal cliques of $T$
 containing them, and let $S$ be a minimum hitting set that hits all the cliques in the path joining $C_u$ and
 $C_v$ in $T$. Then $|S| \leq d_G(u,v)+1$.
 \end{corollary}

\begin{theorem}\label{the:4}
Let $S \subseteq V$ be a set of  vertices that hits all the cliques in the path joining two cliques $C_u$ and $C_v$ in $T$,
then there is a shortest path $P$ in $G$ between $u$ and $v$ such that $P$ contains all the vertices of $S$ and $|P| \leq 2|S|$.
\end{theorem}
\begin{proof}
Since $S$ is a hitting set of the path joining $C_u$ and $C_v$ in $T$, it follows that in $G$ there is a path from $u$ to $v$ of length at most $2 |S|$.
The factor 2 is the worst possible and is achieved in the case when $S$ is an independent set, 
and since any two consecutive cliques on the path from $C_u$ to $C_v$ share at least one common vertex,
two consecutive vertices in the independent set $S$ can be connected by a path of length 2 via this common vertex.
The hitting set vertices are now joined by a path of length at most $2|S|-2$, 
and therefore, by adding edges to $u$ and $v$ from the ends of this path, there is a path of length at most $2|S|$ from $u$ to $v$ in $G$.  Hence the claim.
 \end{proof}
 \\
 We now show that a minimum hitting set of cliques in the path connecting $T_u$ and $T_v$ can be found efficiently. 
 
 \noindent
 {\bf Structure of a Minimum Hitting Set.} 
 Let $P = [C_1,C_{2},\dots,C_b]$ be the path joining $T_u$ and $T_v$ in $T$, and $u \in C_1, v \in C_b$. 
 We reiterate that $C_1$ and $C_b$ are the only cliques in $T_u$ and $T_v$, respectively.  
 In this part it is useful to visualize this path as a sequence of cliques. 
 Therefore a prefix of the path $P$ is a prefix of the corresponding sequence. 
 Let $S$ be a minimum hitting set of the cliques in $P$. 
 Let $v_m$ be a vertex in $C_1$ such that it occurs in a maximum number of cliques (consecutive cliques, naturally) in $P$. 
 Consequently, there is a minimum hitting set $S$ of cliques in $P$ such that $v_m \in S$. 
 Indeed this is true because if we have a minimum hitting set $S'$ that does not satisfy this property, 
 then we can replace $v \in S' \cap C_1$ by $v_m$, and we will have a minimum hitting set satisfying the desired property. 
 This gives us an algorithm to find a minimum hitting set: \\
 {\bf Data Structure for a Minimum Hitting Set:}\\
 Partition the cliques in $P$ into  sub-paths $IS_1,IS_2,\dots,IS_r$ such that
 for  $1 \leq i \leq r$, sub path $IS_i$ is the {\em maximum length prefix} of cliques in $P \setminus \{IS_1,\ldots, IS_{i-1}\}$ that have a common element.
 To compute this maximum length prefix, we start with the empty prefix and the empty set $M$ of common elements. 
 Let $C_j$ be the clique considered in the $j$-th iteration- clearly, it is the first clique in the remaining sequence. 
 If $M \cap C_j = \phi$, then we have found the current prefix as the maximum length prefix, and if it is non-empty then $C_j$ is added to the current prefix.
 Let $M_i$ denote the set of common elements in $IS_i, 1 \leq i \leq r$.   Consider the set $S = \{v_i \mid v_i \in M_i, 1 \leq i \leq r\}$.

\begin{theorem}\label{hittingset}
 The $\emph{hitting set}$ $S$ computed above is a minimum hitting set of cliques in $P$. Further, it can be computed in $O(n^2)$ time.
\end{theorem}

\begin{lemma}\label{addHS}
 Let $C_k$ be a clique on the path $P$ connecting $T_u$ and $T_v$, and let $P_1$ be the path from $C_1$ to $C_k$, and $P_2$ is the path from $C_k$ to $C_b$.    
 Let $S$, $S_1$ and $S_2$ be the minimum hitting sets for $P$, $ P_1$, and $P_2$ respectively, then $|S| \leq |S_1|+|S_2| \leq |S|+1$. 
 \end{lemma}
 
 
 Lemma \ref{addHS} is used to find an efficient and good approximation to the hitting set of cliques in many paths in a clique tree. 
 The efficiency is gained by using the exact hitting set of cliques in some paths in the clique tree to calculate approximate hitting sets of cliques in other paths.
 
 \subsection{Distance oracle for chordal graphs}\label{preprocessing}
 In this section we present the details of the data structures involved in setting up the distance oracle.  
 The preprocessing algorithm receives a chordal graph $G = (V,E)$ as an input adjacency matrix and sets up the distance oracle.
 It first constructs a clique tree $T$ of the graph  $G$. Construction of clique tree $T$ of a chordal graph require $O(n)$ time.
 These is achieved using known algorithms  to construct a clique tree~\cite{golumbic}. \\  
 {\bf Vertex to Maximal Clique Mapping:}  This is very crucial, as the idea is to approximate the distance between two vertices $u_i,u_j$
 in the graph by the hitting set of the maximal cliques in the path connecting the corresponding maximal cliques in $T$. 
 Towards this end, an $n$-element array is used. In this array the $i$-th element corresponds to $u_i$ and it points to a maximal 
 clique of clique tree $T$ that contains $u_i$.   This is achieved by inspecting each clique of $T$ in an arbitrary order, 
 and whenever the array entry corresponding to a vertex $u_i$ is empty and is encountered in the current clique $C_j$, 
 the array entry is updated to point to $C_j$.  
%  This again takes $O(n^2)$ time in the worst case, 
%  though it can be tightly written as $O(\alpha(G) \omega(G))$ where $\alpha(G)$ is the size of the minimum clique cover,
%  and $\omega(G)$ is the size of the maximum clique. 
 We refer to this array as ${\cal H}$.  To populate the array ${\cal H}$ the algorithm inspects each clique of the clique tree  $T$. 
 The size of a clique is bounded by $n$ and also number of maximal cliques in a chordal graph is at most $n$. Hence it takes $O(n^2)$ time to populate ${\cal H}$. 
 Further, the array ${\cal H}$ contains a constant size entry corresponding to each vertex, therefore, the space occupied by ${\cal H}$ is $n$.\\
%  The clique cover can be stored in $O(n)$ space and the array ${\cal H}$ also takes $O(n)$ space. Therefore, the space complexity is $O(n)$. \\
 {\bf Hitting Set Oracle for a rooted Clique Tree:}  We now present an algorithm to calculate the hitting set of cliques on all 
 paths originating from a single vertex in the clique tree.   The algorithm is presented by way of a function definition $DFS(C,X,l)$ in Algorithm \ref{alghs}.
 This information is then used to calculate the approximate distance information efficiently on a query.
\begin{algorithm}[] 
  \caption{DFS($C$,$X$,$l$)- Used to Set up the Hitting Set Oracle}
  \label{alghs}
  \begin{algorithmic}[1]
  \STATE Let $i$ be the index of maximal clique $C$.
  \STATE $X \leftarrow C \cap X$
  \IF{$X \neq \phi$}
    \STATE HS[$i$] = $l$
    \COMMENT {\tt /* no increase in hitting set to hit C */}
  \ELSE 
    \STATE HS[$i$] = $l+1$
    \COMMENT {\tt /*  increase in hitting set to hit C */}
  \ENDIF
  \IF{C is a leaf node in T}
    \STATE return
  \ELSE
    \FOR{each $C' \in \textsc{Children}(C)$}
    \STATE  \COMMENT {\tt /* Find hitting sets of cliques on paths to descendants of C */}
      \IF{$X \neq \phi$}
	\STATE DFS($C'$,$X$,$l$)
      \ELSE
	\STATE $X \leftarrow C'$
	\STATE DFS($C'$,$X$,$l+1$)
       \ENDIF
     \ENDFOR
  \ENDIF
  \end{algorithmic}
 \end{algorithm}
 \begin{lemma} \label{dfsoutput}
 On termination of the function call $DFS(C_r,C_r,1)$, for each $1 \leq i \leq n$ the array $HS[i]$ has the value of the
 minimum hitting set of  the cliques in the path from $C_r$ to clique $C_i$ in the clique tree $T$.
 \end{lemma} 
 \begin{proof}
 The correctness proof works based on Theorem \ref{hittingset}. 
 The proof is a direct application of Theorem \ref{hittingset} if the tree rooted at $C_r$ is a path. 
 In case the tree is not a path, let us focus on one particular node $C_i$ in the tree. 
 When the DFS traversal visits $C_i$, owing to the careful use of recursion, we can consider just the path from $C_r$ to $C_i$ in our analysis.
 Now we appeal to Theorem \ref{hittingset} to conclude that $HS[i]$ contains the minimum hitting set of the cliques on the path from $C_r$ to $C_i$.
\end{proof}
\\

 The array $HS$ has one element per maximal clique in $G$. Therefore, it has at most $n$ elements in it.  
 Since a DFS traversal is used to populate $HS$ using an $O(n)$ time set intersection performed at each node, 
 it follows that the entries of $HS$ are calculated in $O(n^2)$ time.
 Further, the clique tree itself requires $O(n^2)$ space and therefore, the setup time and space of the algorithm is $O(n^2)$. \\   

 {\bf Setting up the rooted $T$ for LCA queries:} To be able to answer distance queries efficiently, 
 our aim is to use the hitting set  of the cliques on the path between a pair of cliques in $T$. 
 For this, we will be using Lemma \ref{addHS}. In particular for the distance between $u$ and $v$, 
 we propose to use the hitting set of the cliques on the path between $C_u$ and $C_v$ in clique tree $T$. 
 To compute the value of this hitting set, we will
 take the least common ancestor $C$ of $C_u$ and $C_v$ in the rooted tree,
 and compute the hitting set of the cliques on the path from $C$ and $C_u$, 
 and similarly between $C$ and $C_v$. Using these hitting set values, we apply Lemma \ref{addHS}. 
 Therefore, it is crucial that we can perform LCA queries efficiently. 
 Towards this end we preprocess the rooted tree $T$, using algorithm presented in~\cite{lcabyvishkin}, 
 to build a data structure $D$ of linear size in linear time. Using $D$ we can compute the 
 least common ancestor of any two cliques $C_u$ and $C_v$ in $T$ in constant time.  \\
 
 \noindent
 As a consequence of the above results in Lemma \ref{dfsoutput} and the LCA algorithm in \cite{lcabyvishkin}, 
 we have the following theorem about the time to construct our distance oracle and the space occupied by it.
 \begin{theorem} \label{oracle}
 Given a chordal graph $G$, the data structure, $HS$, ${\cal H}$ and $D$ use $O(n)$ 
 space and as described above can be constructed in $O(n^2)$ time and $O(n^2)$ space.  
 \end{theorem}
 
 \subsection{Constant time response to distance queries}
 \begin{algorithm}[h] 
  \caption{$Query(u_i,u_j)$- uses the Oracle ${\cal H}, HS, D$ as in Theorem \ref{oracle}}
  \label{querydist}
  \begin{algorithmic}[1]
    \IF{$\{u_i,u_j\} \in E(G)$}
    	\STATE return 1
	\STATE {\tt /* distance is 1 in constant time by probing adjacency matrix */}
  \ENDIF
  \STATE $p = {\cal H}[i]$; 
  \STATE $q = {\cal H}[j]$;
  \STATE {\tt /* these are indices of two maximal cliques containing $u_i$ and $u_j$ */}
  \IF {$p==r$ (or $q==r$)}
  \STATE {\tt /* $r$ be the index of root clique $C_r$ */}
  	\STATE $h_{pq}=HS[q]$ (or $HS[p,q]=HS[p]$)
	\STATE {\tt /* one of the two queried vertices is in root clique $C_r$ */}
	\ELSE
	\STATE Query $D$ with $p$ and $q$.
	\STATE Let $s$ be the least common ancestor of $p$ and $q$ in $T$.
	 \IF {$p==s$ (or $q==s$)}
  	\STATE $h_{pq}=(HS[q]-HS[p]+1)$ (or $HS[p,q]=(HS[p]-HS[q]+1)$)
	\STATE {\tt /* $r, p, q$ are in a single path */}
	\ELSE
	\IF {$s==r$}
  	\STATE $h_{pq}=HS[q]+HS[p]$ 
	\ELSE
	\STATE  $h_{pq}=HS[q]+HS[p]-2HS[s]+2$
	\ENDIF
	\ENDIF
	\ENDIF
	\STATE return $d_{ij} = 2*h_{pq}$
	\STATE {\tt /* Approximate Distance Returned */}
    \end{algorithmic}
 \end{algorithm}
 The query consists of $u_i,u_j \in V$ as input and the response is a value $d_{ij}$ which is the
 approximate distance between $u_i$ and $u_j$ in $G$. The algorithm given below in Algorithm \ref{querydist} 
 uses the oracle set up earlier in this section.  Recall that ${\cal H}[i]$ gives the index of a maximal clique
 in a clique cover that contains vertex $u_i$.  Similarly, $HS[i]$ gives the size of the minimum hitting set of 
 the  maximal cliques on path connecting $C_r$ and $C_i$.  Finally, $D$ can respond to LCA queries on $T$ in constant time.
  
 The most important benefit of using the hitting sets of the cliques on a path between two cliques in $T$
 is that for any pair of cliques this can be computed within an additive error of 3. 
 Using this approximate hitting set value, we can then provide an estimate of the distance, as shown in Algorithm \ref{querydist}.   
  
 \begin{lemma}\label{lam:ab}
  For two cliques $C_p$ and $C_q$ in $T$, let $S_{pq}$ denote a minimum hitting set of the cliques on the path connecting $C_p$ and $C_q$ in $T$. 
  Then then value $h_{pq}$ calculated in Algorithm \ref{querydist} is such that $h_{pq} \leq |S_{pq}|+3$.
 \end{lemma}
  
 \begin{lemma}\label{distlemm}
 For any two vertices $u_i, u_j \in V(G)$, the value $d_{ij}$ output by Algorithm \ref{querydist} is such that  $d_{ij} \leq 2d_G[u_i,u_j]+8$.
 Further, there is a path in $G$ of length at most $d_{ij}$.
 \end{lemma}
 \begin{proof}
 We know that $d_{ij} = 2h_{pq}$. From Lemma \ref{lam:ab}, $h_{pq} \leq |S_{pq}|+3$. 
 Further, from Corollary \ref{hitselany}, we know that $|S_{pq}| \leq d_G(u_i,u_j) + 1$.  
 Therefore, it follows that $d_{ij} \leq 2(d_G(u_i,u_j)+1+ 3)=2d_G(u_i,u_j)+8$.  
 Since there is a hitting set of size at most $h_{pq}$ that hits the cliques on the path from $C_p$ to $C_q$, 
 from Theorem \ref{the:4} it follows that there is a path of length $d_{ij}=2h_{pq}$. Hence the lemma.
 \end{proof}
 
 We have now proved all the properties of our distance oracle for chordal graphs and these complete the proof of  Theorem \ref{maintheorem}.
 
 \subsection{Response to a query of shortest path}
 Lemma \ref{distlemm} proves that a path of length at most $d_{ij}$ exists between $u_i$ and $u_j$ in $G$. 
 We can modify the distance oracle in this paper to store entire hitting sets instead of the size of the hitting set.
 We essentially keep the hitting sets of cliques on all paths originating from a 
single vertex in the clique tree.
 Now, by including clique tree also in our modified distance oracle we can respond to distance queries with paths of length at most $2d_G(u,v)+8$.
 The query time would take length of the path being output.
 Size of the clique tree is $O(n^2)$. Also, it requires $O(n^2)$ space to keep hitting set of cliques on all paths originating from a 
single vertex in the clique tree. Therefore, the size of the modified distance oracle is $O(n^2)$.


\section{CONCLUSION AND FUTURE WORK}
 \subsection{Conclusion}
 In this work we studied distance oracle for chordal graphs. We explored the structural properties of underlying clique tree
 structure of chordal graphs to build a set of data structures that can answer distance queries in constant time.
 We proved that the hitting set for the path joining cliques $C_i$ and $C_j$ encodes the distance between the pair of vertices present in 
 $C_i$ and $C_j$ respectively. Lemma \ref{hitsel} and Theorem \ref{the:4} represent an interesting connection between the hitting set for a path of cliques
 in clique tree and the distance between the vertices present in the end cliques of the path. We also proved that by keeping the size of 
 the hitting set of cliques on all paths originating from a single vertex in the clique tree, we can compute hitting set for the path joining 
 any pair of cliques in constant time. This observation is important to answer queries in constant time.
 We essentially proved that a linear size distance oracle for chordal graphs can be build in $O(n^2)$ time and $O(n^2)$ space. 
 Subsequent queries for the distance between any pair of vertices of the graph can be answered approximately in constant time. 
 Finally, by maintaining the approximate hitting sets too, 
 along with the whole clique tree, we can modify the distance oracle in this paper to use $O(n^2)$ space, 
 and  respond to distance queries with paths of length at most $2d_G(u,v)+8$.
 
 \subsection{Future Work}
 A tree $t$-spanner of a graph can be visualized as a distance oracle of the graph that can answer distance queries with stretch of at most $t$.
 We know that the hitting set encodes the distance information of the graph.
 Therefore, the idea of hitting set can be further extended to compute the tree t-spanner for chordal graphs. 
 The other area of work is to use the idea of hitting set to compute $G^2$ matrix for split graphs without using matrix multiplication.
 Due to a reduction by Han et al.\cite{han}, we know that, if $G^2$ matrix of a split graph can be computed efficiently then it can be efficiently computed for general graphs as well.
 Therefore, by using this procedure we can remove the dependency of solving $\textsc{APSP}$ for unweighted general graphs~\cite{seidel} on matrix multiplication. 
 Hence it will reduce the time complexity to compute $\textsc{APSP}$ matrix for general unweighted graph.
 
  
 

\section{PROPOSED CONTENTS OF THE THESIS}

\input{contents.tex}

\section{PUBLICATIONS BASED ON THE THESIS}

\begin{enumerate}  
 \item Gaurav Singh, N. S. Narayanswamy and G. Ramakrishna \newblock
  "Approximate Distance Oracle in $O(n^2)$ Time and $O(n)$ Space for Chordal Graphs", \newblock {\em
  The 25th International Symposium on Algorithms and Computation, 2014}, Jeonju, Korea (under review).
\end{enumerate}

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% % Bibliography.
% \pagebreak
% %\nocite{*}
% \begin{singlespace}
%   \begin{small}
% 	\bibliographystyle{plain}
% 	\bibliography{synopsis}
% %	\bibliography{iccad}
%   \end{small}
% \end{singlespace}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 \pagebreak
\nocite{*}
\renewcommand\refname{REFERENCES}
\bibliographystyle{plain}
\bibliography{synopsis}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\end{document}
